- hosts: 127.0.0.1
  connection: local

  tasks:
    - name: install pyenv packages
      # these should have been installed manually when installing pyenv
      # but just in case...
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - zlib-devel
        - bzip2
        - bzip2-devel
        - readline-devel
        - sqlite
        - sqlite-devel
        - openssl-devel

    - name: install basic packages
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - i3
        - tmux
        - patch
        - libyaml-devel    # for compiling ruby versions
        - gdbm-devel       # for compiling ruby versions
        - htop

    # - name: install postgres
    #   become: yes
    #   action: >
    #     {{ ansible_pkg_mgr }} name={{ item }} state=present
    #   with_items:
    #     - postgresql-server
    #     - postgresql-contrib
    #     - postgresql-devel
    #   notify:
    #     - init postgres

    - name: Install emacs
      dnf: name=emacs state=present
      become: yes

    - name: install emacs Live packs
      shell: "{{ item }}"
      with_items:
        - rmdir .emacs.d
        - git clone https://github.com/overtone/emacs-live.git .emacs.d
        - make -C .emacs.d/packs/stable/org-pack/lib/org-mode autoloads
        # - mkdir --parents .live-packs/{{ ansible_user_id }}-pack
        # - cp -R .emacs.d/packs/template/user-template-pack .live-packs/{{ ansible_user_id }}-pack
        - git clone --recursive git@gh.leapfrogonline.com:JFosco/emacs-live-jfosco-pack.git .live-packs/{{ ansible_user_id }}-pack
        - echo "(live-add-packs '(~/.live-packs/jfosco-pack))" > .emacs-live.el
      args:
        chdir: $HOME
        creates: .emacs-live.el

    - name: install xsel
      # to allow cut/paste in emacs from system clipboard
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - xsel

    - name: install chrome
      become: yes
      dnf:
        name: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
        disable_gpg_check: yes
        state: present

    - name: install firefox developer edition
      shell: "{{ item }}"
      with_items:
        - ./firefox_developer_edition.sh
      args:
        creates: /opt/firefox-developer/firefox/firefox

    - name: install applications
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      with_items:
        - keepass

    # - name: install npm
    #   become: yes
    #   action: >
    #     {{ ansible_pkg_mgr }} name={{ item }} state=present
    #   with_items:
    #     - npm

    # - name: install nodenv
    #   shell: "{{ item }}"
    #   with_items:
    #     - git clone https://github.com/nodenv/nodenv.git ~/.nodenv
    #   args:
    #     chdir: $HOME
    #     creates: ~/.nodenv
    #   notify: setup nodenv

  # handlers:
    # # not really tested
    # - name: init postgres
    #   become: yes
    #   shell: "{{ item }}"
    #   with_items:
    #     - postgresql-setup --initdb --unit postgresql
    #     - systemctl enable postgresql
    #   # still need to create your user and create default db

    # - name: setup nodenv
    #   shell: "{{ item }}"
    #   with_items:
    #     - cd ~/.nodenv && src/configure && make -C src
    #     - echo 'export PATH="$HOME/.nodenv/bin:$PATH"' >> ~/.bash_profile
    #     - eval "$(nodenv init -)"
    #     - git clone https://github.com/nodenv/node-build.git ~/.nodenv/plugins/node-build
    #   args:
    #     chdir: $HOME

# TO BE ADDED TO THIS
#  - install for rbenv
#  - install for ruby-build


# NOTES
#
# To get ansible working on Fedora with python2 you must
#   sudo dnf install python2-dnf
#
# Generate and add your ssh key to github before running
#
# For Postgres
# add your userid with superuser privilidges
# in /var/lib/pgsql/data/pg_hba.conf (or wherever pg_hba.conf is)
# change all entries that are "ident" under METHOD to "trust"
#
# For Chrome
# need to figure out how to not download .rpm every time
#
# For Firefox Developer Edition
# need to add Alias in .bashrc/.bash_profile to distinguish from system firefox
# alias firefoxd='nohup /opt/firefox-developer/firefox/firefox &>/dev/null &'
#
