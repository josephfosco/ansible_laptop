- hosts: 127.0.0.1
  connection: local

  tasks:
    - name: install pyenv packages
      # these should have been installed manually when installing pyenv
      # but just in case...
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - zlib-devel
        - bzip2
        - bzip2-devel
        - readline-devel
        - sqlite
        - sqlite-devel
        - openssl-devel
        - libffi-devel

    - name: install basic packages
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - i3
        - pavucontrol      # pulse audio sound control
        - sway
        - tmux
        - patch
        - libyaml-devel    # for compiling ruby versions
        - gdbm-devel       # for compiling ruby versions
        - htop
        - zeal             # for offline programming doc viewing

    - name: install utilities
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - gparted
        - strace
      tags:
        - utilities

    # - name: install postgres
    #   become: yes
    #   action: >
    #     {{ ansible_pkg_mgr }} name={{ item }} state=present
    #   with_items:
    #     - postgresql-server
    #     - postgresql-contrib
    #     - postgresql-devel
    #   notify:
    #     - init postgres

    - name: Install supercollider
      dnf: name=supercollider state=present
      become: yes
      tags:
        - supercollider

    - name: Install pipeaudio-jack
      dnf:
        name=pipewire-plugin-jack
        state=present
      become: yes
      tags:
        - supercollider

    - name: Install emacs
      dnf: name=emacs state=present
      become: yes

    - name: install emacs Live packs
      shell: "{{ item }}"
      with_items:
        - rmdir .emacs.d
        - git clone https://github.com/overtone/emacs-live.git .emacs.d
        - make -C .emacs.d/packs/stable/org-pack/lib/org-mode autoloads
        # - mkdir --parents .live-packs/{{ ansible_user_id }}-pack
        # - cp -R .emacs.d/packs/template/user-template-pack .live-packs/{{ ansible_user_id }}-pack
        - git clone --recursive git@gh.leapfrogonline.com:JFosco/emacs-live-jfosco-pack.git .live-packs/{{ ansible_user_id }}-pack
        - echo "(live-add-packs '(~/.live-packs/jfosco-pack))" > .emacs-live.el
      args:
        chdir: $HOME
        creates: .emacs-live.el

    - name: install xsel
      # to allow cut/paste in emacs from system clipboard
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - xsel

    - name: install chrome
      become: yes
      dnf:
        name: https://dl.google.com/linux/direct/google-chrome-stable_current_x86_64.rpm
        disable_gpg_check: yes
        state: present

    # COMMENTED OUT TILL IT WILL NOT INSTALL EVERY TIME
    # - name: install firefox developer edition
    #   shell: "{{ item }}"
    #   with_items:
    #     - ./firefox_developer_edition.sh
    #   args:
    #     creates: /opt/firefox-developer/firefox/firefox

    - name: install applications
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - keepassxc
        - mediawriter   # to create botable fedora usb drive
        - vsftpd
      tags:
        - apps

    - name: install rlwrap for clojure
      become: yes
      dnf:
        name: rlwrap
        state: present
      tags:
        - clojure

    - name: download clojure cli tools install
      become: yes
      get_url:
        url: https://download.clojure.org/install/linux-install-1.10.1.536.sh
        dest: /tmp/linux-install-1.10.1.536.sh
        mode: 0755
      tags:
        - clojure

    - name: execute clojure cli install
      become: yes
      shell: /tmp/linux-install-1.10.1.536.sh
      tags:
        - clojure

    - name: remove clojure cli installer
      become: yes
      file: path=/tmp/zsh-installer.sh
      args:
        state: absent
      tags:
        - clojure

    # - name: install rpmfusion repo for ffmpeg
    #   become: yes
    #   dnf:
    #     name: 'https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm'
    #     disable_gpg_check: yes
    #     state: present

    # install ffdmpeg to play video on twitter
    # must first install the rpmfusion-free repo using
    # sudo dnf install https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
    # or whatever command is suggested at https://rpmfusion.org/Configuration
    # I attemptesd to do this automatically using the above commented out step "install rpmfusion repo for ffmpeg"
    # but was unable to make this work
    - name: install ffmpeg
      become: yes
      dnf:
        name: ffmpeg
        enablerepo: rpmfusion
        state: present

    - name: install mariadb
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - mariadb
        - mariadb-server
      tags:
        - wordpress

    - name: install php
      become: yes
      action: >
        {{ ansible_pkg_mgr }} name={{ item }} state=present
      loop:
        - php
        - php-common
        - php-mysqlnd
        - php-gd
        - php-imap
        - php-xml
        - php-cli
        - php-opcache
        - php-mbstring
      tags:
        - wordpress

    - name: Install phpmyadmin
      dnf:
        name=phpmyadmin
        state=present
      become: yes
      tags:
        - wordpress

    # Raspberry Pi software

    ### OLD ETCHER REPO AND PROGRAM ###
    # - name: add etcher rpm repo for etcher
    #   become: yes
    #   command: wget https://bintray.com/resin-io/redhat/rpm -O /etc/yum.repos.d/bintray-resin-io-redhat.repo
    #   args:
    #     creates: /etc/yum.repos.d/bintray-resin-io-redhat.repo
    # - name: install etcher to burn RaspberryPi OS
    #   become: yes
    #   dnf:
    #     name: etcher-electron
    #     state: latest
    #   tags:
    #     raspberrypi


    - name: add etcher repo
      become: yes
      get_url:
        url: https://balena.io/etcher/static/etcher-rpm.repo
        dest: /etc/yum.repos.d/etcher-rpm.repo
      tags:
        raspberrypi

    - name: install etcher to burn RaspberryPi OS
      become: yes
      dnf:
        name: balena-etcher-electron
        state: latest
      tags:
        raspberrypi

    - name: Install arduino
      dnf: name=arduino state=present
      become: yes

    # install screen for use with adafruit Circuit Python
    - name: Install screen
      dnf: name=screen state=present
      become: yes

    - name: install rbenv
      shell: |
        loop:
          git clone https://github.com/rbenv/rbenv.git ~/.rbenv
      args:
        chdir: $HOME
        creates: ~/.rbenv
      notify:
        setup rbenv
      tags:
        - ruby

    # - name: install npm
    #   become: yes
    #   action: >
    #     {{ ansible_pkg_mgr }} name={{ item }} state=present
    #   with_items:
    #     - npm

    # - name: install nodenv
    #   shell: "{{ item }}"
    #   with_items:
    #     - git clone https://github.com/nodenv/nodenv.git ~/.nodenv
    #   args:
    #     chdir: $HOME
    #     creates: ~/.nodenv
    #   notify: setup nodenv

  handlers:
    # sets up bash profile for rbenv and installs ruby-build
    - name: setup rbenv
      shell: |
        loop:
          echo '' >> ~/.bash_profile
          echo '# rbenv shims' >> ~/.bash_profile
          echo 'export PATH="$HOME/.rbenv/bin:$PATH"' >> ~/.bash_profile
          export PATH="$HOME/.rbenv/bin:$PATH"
          ~/.rbenv/bin/rbenv init
          echo 'eval "$(rbenv init -)"' >> ~/.bash_profile
          mkdir -p "$(rbenv root)"/plugins
          git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
      args:
        chdir: $HOME
      tags:
        - ruby

  # # not really tested
    # - name: init postgres
    #   become: yes
    #   shell: "{{ item }}"
    #   with_items:
    #     - postgresql-setup --initdb --unit postgresql
    #     - systemctl enable postgresql
    #   # still need to create your user and create default db

    # - name: setup nodenv
    #   shell: "{{ item }}"
    #   with_items:
    #     - cd ~/.nodenv && src/configure && make -C src
    #     - echo 'export PATH="$HOME/.nodenv/bin:$PATH"' >> ~/.bash_profile
    #     - eval "$(nodenv init -)"
    #     - git clone https://github.com/nodenv/node-build.git ~/.nodenv/plugins/node-build
    #   args:
    #     chdir: $HOME

# TO BE ADDED TO THIS
#  - install for rbenv
#  - install for ruby-build


# NOTES
#
# Must add an environment variable in .bash_profile to use ansible_hosts file
#  export ANSIBLE_CONFIG="~/sys/ansible/setup/ansible.cfg"
#
# To get ansible working on Fedora with python2 you must
#   sudo dnf install python2-dnf
#
# Generate and add your ssh key to github before running
#
# For Postgres
# add your userid with superuser privilidges
# in /var/lib/pgsql/data/pg_hba.conf (or wherever pg_hba.conf is)
# change all entries that are "ident" under METHOD to "trust"
#
# For Chrome
# need to figure out how to not download .rpm every time
#
# For Firefox Developer Edition
# need to add Alias in .bashrc/.bash_profile to distinguish from system firefox
# alias firefoxd='nohup /opt/firefox-developer/firefox/firefox &>/dev/null &'
#
